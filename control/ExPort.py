# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'export.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore,QtWidgets
from PyQt5.QtWidgets import *
import sys
import xlwt
import sqlite3
from PyQt5.QtGui import *
from wglogging  import LogSystem



class Ui_Export(object):
    def setupUi(self, Expoet):
        Expoet.setObjectName("Expoet")
        Expoet.setFixedSize(500, 300)
        Expoet.setWindowIcon(QIcon('logo.png'))
        Expoet.setStyleSheet("background-image:url(test.jpg)")

        self.radioButton = QtWidgets.QRadioButton(Expoet)
        self.radioButton.setGeometry(QtCore.QRect(50, 50, 101, 21))
        self.radioButton.setObjectName("radioButton")

        self.radioButton_2 = QtWidgets.QRadioButton(Expoet)
        self.radioButton_2.setGeometry(QtCore.QRect(50, 80, 200, 21))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.setChecked(True)#默认选中

        self.radioButton_3 = QtWidgets.QRadioButton(Expoet)
        self.radioButton_3.setGeometry(QtCore.QRect(50, 110, 151, 21))
        self.radioButton_3.setObjectName("radioButton_3")

        self.radioButton_4 = QtWidgets.QRadioButton(Expoet)
        self.radioButton_4.setGeometry(QtCore.QRect(50, 140, 121, 21))
        self.radioButton_4.setObjectName("radioButton_4")

        self.radioButton_5 = QtWidgets.QRadioButton(Expoet)
        self.radioButton_5.setGeometry(QtCore.QRect(50, 170, 121, 21))
        self.radioButton_5.setObjectName("radioButton_5")

        self.pushButton = QtWidgets.QPushButton(Expoet)
        self.pushButton.setGeometry(QtCore.QRect(300, 260, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(Expoet)
        self.pushButton_2.setGeometry(QtCore.QRect(390, 260, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")

        self.label = QtWidgets.QLabel(Expoet)
        self.label.setGeometry(QtCore.QRect(20, 20, 54, 12))
        self.label.setObjectName("label")

        self.retranslateUi(Expoet)
        QtCore.QMetaObject.connectSlotsByName(Expoet)

    def retranslateUi(self, Expoet):
        _translate = QtCore.QCoreApplication.translate
        Expoet.setWindowTitle(_translate("Expoet", "导出向导"))
        self.radioButton.setText(_translate("Expoet", "CSV文件(*.csv)"))
        self.radioButton_2.setText(_translate("Expoet", "Excel 97-2003 工作簿(*.xls)"))
        self.label.setText(_translate("Expoet", "导出格式："))
        self.radioButton_3.setText(_translate("Expoet", "Excel文件（*.xlsx）"))
        self.pushButton.setText(_translate("Expoet", "下一步"))
        self.pushButton_2.setText(_translate("Expoet", "取消"))
        self.radioButton_4.setText(_translate("Expoet", "DBase文件(*.dbf)"))
        self.radioButton_5.setText(_translate("Expoet", "文本文件(*.txt)"))


class ExportSystem(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.UI = Ui_Export()
        self.UI.setupUi(self)
        self.Logs = LogSystem()

        self.UI.pushButton.clicked.connect(lambda: self.exPort())
        self.UI.pushButton_2.clicked.connect(lambda: self.cancel())
        # self.UI.radioButton.toggled.connect(lambda: self.exPort(self.btn1))  # 绑定点击事件
        #self.UI.radioButton.toggled.connect(lambda: self.exPort())
        #self.UI.radioButton_5.setEnabled(False)  # 默认"开始导入"按钮不能点击


    def exPort(self):
        try:
            conn = sqlite3.connect('./wanggmanage.db')
            cur = conn.cursor()  # 获取游标

            if self.UI.radioButton.isChecked() == True:
                file, ok = QFileDialog.getSaveFileName(self, '文件保存', 'C:\\', 'All Files (*);;CSV 文件(*.csv)')

            if self.UI.radioButton_2.isChecked() == True:
                file, ok = QFileDialog.getSaveFileName(self, '文件保存', 'C:\\', 'All Files (*);;Excel 97-2003 工作簿(*.xls)')

            if self.UI.radioButton_3.isChecked() == True:
                file, ok = QFileDialog.getSaveFileName(self, '文件保存', 'C:\\', 'All Files (*);;Excel 文件(*.xlsx)')

            if self.UI.radioButton_4.isChecked() == True:
                file, ok = QFileDialog.getSaveFileName(self, '文件保存', 'C:\\', 'All Files (*);;DBase 文件(*.dbf)')

            if self.UI.radioButton_5.isChecked() == True:
                file, ok = QFileDialog.getSaveFileName(self, '文件保存', 'C:\\', 'All Files (*);;文本文件(*.txt)')

            if file != '':
                if 'xls' or 'csv' or 'xlsx' or 'dbf' or 'txt'in file:
                    workbook = xlwt.Workbook()
                    worksheet = workbook.add_sheet('sheet1')
                    cur.execute("select * from sendgateways")
                    row = cur.fetchone()
                    j = 0
                    while row:
                        n = len(row)
                        for i in range(0, n):
                            worksheet.write(j, i, str(row[i]))
                        j += 1
                        row = cur.fetchone()

                    workbook.save(file)
                    print('导出成功，文件已保存至%s' % file)
                    self.Logs.logger.info('The file was successfully exported from the sendgateways ')
                    QMessageBox.information(self, '提示', '导出成功，文件已保存至%s' % (file), QMessageBox.Ok)
                    self.close()
                    return
        except Exception as e:
            print(e)

    def cancel(self):
        self.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = ExportSystem()
    mainWindow.show()
    sys.exit(app.exec_())