# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tatest.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtGui,QtCore,QtWidgets,QtSql
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import matplotlib
# 使用 matplotlib中的FigureCanvas (在使用 Qt5 Backends中 FigureCanvas继承自QtWidgets.QWidget)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas#封装一个FigureCanvasQTAgg类，画图的时候调用这个类，FigureCanvasXAgg就是一个渲染器，渲染器的工作就是drawing，执行绘图的这个动作。渲染器是使物体显示在屏幕上
from PyQt5 import QtWidgets
import matplotlib.pyplot as plt
import numpy as np
from PyQt5 import QtCore, QtSql
from PyQt5.QtGui import QIcon


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(850, 600)

        # MainWindow.setWindowFlags(
        #     QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowMaximizeButtonHint | QtCore.Qt.WindowCloseButtonHint)
        #MainWindow.setWindowTitle("返修网关维护表")
        MainWindow.setWindowIcon(QIcon('logo.png'))
        # MainWindow.setStyleSheet("background-image:url(1.jpg)")

        # self.figure = plt.figure(MainWindow)  # (facecolor='#FFD7C4')  # 可选参数,facecolor为背景颜色，plt.figure()绘画
        # self.canvas = FigureCanvas(self.figure)  # 画布

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 23))
        self.menubar.setObjectName("menubar")

        fileMenu = self.menubar.addMenu('文件')
        editMenu = self.menubar.addMenu('编辑')
        viewMenu = self.menubar.addMenu('视图')
        toolsMenu = self.menubar.addMenu('工具')
        helpMenu = self.menubar.addMenu('帮助')

        # MainWindow.setMenuBar(self.menubar)
        # 创建一个action(行为)，标题为"exti"， self 为parent
        self.exitButton = QAction('Exit', MainWindow)
        # exitButton = QAction(self)
        # 设置设置该action为分离器 也就是分隔符,当为true时 QIcon会无效
        # 0或非0有效
        # exitButton.setSeparator(0)
        # 设置action的快捷键
        self.exitButton.setShortcut('Ctrl+Q')
        # 设置action的状态栏说明
        #self.exitButton.setStatusTip('退出当前应用')
        # 更改action的title
        self.exitButton.setText("退出系统")

        self.btn_segateway = QAction('Send', MainWindow)
        self.btn_segateway.setText("发货信息")

        self.btn_regateway = QAction('Regateway', MainWindow)
        self.btn_regateway.setText("返修信息")

        self.b_logs = QAction('Log', MainWindow)
        self.b_logs.setText("历史日志")

        self.b_help = QAction('Help', MainWindow)
        self.b_help.setText("帮助")

        self.b_about = QAction('About', MainWindow)
        self.b_about.setText("关于")


        # 可以将单个action按钮添加到菜单中：
        fileMenu.addAction(self.btn_segateway)
        fileMenu.addAction(self.btn_regateway)
        fileMenu.addAction(self.exitButton)

        toolsMenu.addAction(self.b_logs)

        helpMenu.addAction(self.b_help)
        helpMenu.addAction(self.b_about)


        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        # 开启action状态栏
        # self.statusBar()

       # MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "网关管理主页"))

